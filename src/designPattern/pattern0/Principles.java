package designPattern.pattern0;

/*
*   设计模式   笔记1
*   @author  zaichiyikoua
*   @time  2020年1月3日
*   @description  { 面向对象设计原则 }
*/

public class Principles {
    // ****************************************************
    // 1.单一职能
    // ****************************************************
    // 最简单的面向对象设计的原则，也是最核心的
    // “高内聚，低耦合”
    // 就是说，一个类承担的作用尽量的减少，因为如果一旦承担的职能越多
    // 被复用的程度就越低，代码越耦合，其中一个发生改变，可能会影响到其他的职能

    // ****************************************************
    // 2.开闭
    // ****************************************************
    // 最重要的原则之一
    // 把它理解为在设计模块的时候，要保证对外扩展性，也要保证对内不可修改
    // 也就是说，要在模块内部不被修改的前提下完成(不修改原来的代码)代码的扩展
    // 总结起来就是“对外开放扩展，对内封闭修改”

    // ****************************************************
    // 3.里氏替换
    // ****************************************************
    // 就是对系统进行抽象化处理，并且从抽象化中导出具体化
    // 简单点讲，就是所有引用的父类，都可以被它的子类进行替换，都可以使用它的子类对象
    // 这条原则是实现开闭原则的重要方式之一
    // 在实际开发中，尽量的使用父类类型来对对象进行定义，然后在运行的时候替换成实际的子类
    // 也就是建议开发者多使用多态机制

    // ****************************************************
    // 4.依赖倒转
    // ****************************************************
    // 这是面向对象设计的主要机制
    // 代码要依赖于抽象的类，不要依赖于具体的类
    // 简单点说就是“面向接口编程，不要面向实现编程”
    // 所以常用的实现方式就是在接口中定义，在实现类中具体

    // ****************************************************
    // 5.接口隔离
    // ****************************************************
    // 4中说了要面向接口编程，这里的接口隔离指的是要将大的接口进行拆分
    // 使用多个细化之后的，专门的接口来替换一个总的接口
    // 使用接口的各个客户端仅仅需要直到相关的方法就可以了
    // 每一个接口承担相对独立的作用，互不干扰

    // ****************************************************
    // 6.合成复用
    // ****************************************************
    // 这是很重要的原则之一
    // 核心思想就是降低系统中的代码耦合
    // 简单点说，就是建议在开发过程中，尽量多去使用“组合/聚合”，而不是“继承”
    // 虽然继承机制很方便的可以实现代码复用，扩展等
    // 但是缺点在于会破坏掉系统的封装性，因为继承会导致父类的实现会暴露给子类
    // 并且组合/聚合方式更加的简单灵活方便，耦合程度更低，一个成员的变化不会影响到其他的成员
    // 一般情况下都首选组合/聚合机制来实现代码的复用，其次再考虑继承

    // ****************************************************
    // 7.迪米特法则
    // ****************************************************
    // 又称为“最少知识原则”
    // 用于降低系统的耦合度，让类与类之间保持松散的耦合关系
    // 简单点讲，就是一个软件实体对于其他实体的引用越少越好，如果两个类不必直接通信的话
    // 那就不应当发生直接的相互作用，可以考虑用第三方的引入来产生间接的联系
    // 举个例子，Spring框架就是用IOC容器来降低耦合的
}