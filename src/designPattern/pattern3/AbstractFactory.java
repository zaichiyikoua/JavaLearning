package designPattern.pattern3;

/*
*	设计模式   笔记4
*	@author  zaichiyikoua
*	@time  2020年1月6日
*	@description  { 抽象工厂模式 }
*/

public class AbstractFactory {
    // 抽象工厂模式（Abstract Factory Pattern）是围绕一个超级工厂创建其他工厂。
    // 是工厂模式的泛化版，在实际的开发中，这种模式的应用是特别高的
    // 一般情况下，一个具体的工厂中只会有一个工厂方法，但有时候我们需要一个工厂提供多个产品对象
    // 比如一个电器工厂，可以生产电视，冰箱，空调等等，而不是生产单一的某种类型

    // 当系统锁提供的工厂所需生产的具体产品不是一个简单的对象，而是多个位于不同产品等级结构中
    // 属于不同类型的具体产品时，就需要使用抽象工厂模式

    // 结构：1.抽象工厂 2.具体工厂 3.抽象产品 4.具体产品

    // 优点：当一个产品族中的多个对象被设计成一起工作时，它能保证客户端始终只使用同一个产品族中的对象。

    // 缺点：产品族扩展非常困难，要增加一个系列的某一产品，既要在抽象的 Creator里加代码，又要在具体的里面加代码。

    // 使用场景： 1.QQ换皮肤，一整套一起换。 2.生成不同操作系统的程序。
}
