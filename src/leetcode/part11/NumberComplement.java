package leetcode.part11;

/*
*	leetCode算法刷题记录   笔记105
*	@author  zaichiyikoua
*	@time  2020年2月27日
*	@title  { 数字的补数 }
*/

//给定一个正整数，输出它的补数。补数是对该数的二进制表示取反。
//注意:
//给定的整数保证在32位带符号整数的范围内。
//你可以假定二进制数不包含前导零位。
//示例 1:
//输入: 5
//输出: 2
//解释: 5的二进制表示为101（没有前导零位），其补数为010。所以你需要输出2。
//示例 2:
//输入: 1
//输出: 0
//解释: 1的二进制表示为1（没有前导零位），其补数为0。所以你需要输出0。
public class NumberComplement {
    // 因为不会位运算，所以要记住二级制和十进制的转换，虽然老是忘记
    // 十进制转二进制，除二取余法，逆序排列
    // 二进制转十进制，就是数1的个数，然后是2的n方，这个n就是1的位数，然后求和就行了
    public int solution(int num) {
        // 位数
        int count = 0;
        int sum = 0;
        while (num != 0) {
            // 题中要求的是补码，那么判断的时候其实只要反过来就行了
            if (num % 2 == 0) {
                // 此时原本是0，所以补码应该是1
                sum += Math.pow(2, count);
            }
            count++;
            // 除二
            num /= 2;
        }
        return sum;
    }
}
