package designPattern.pattern7;

/*
*	设计模式   笔记8
*	@author  zaichiyikoua
*	@time  2020年1月7日
*	@description  { 桥接模式 }
*/

public class Bridge {
    // 桥接模式(Bridge pattern),将抽象部分和实现部分进行分离，使他们可以独立的变化
    // 这样可能不太明白，举个例子
    // 现在需要提供大中小三种型号的画笔，要能够绘制五种不同的颜色。那么现在有两种方案
    // 第一种是实现每一个类型，那么就是3x5=15个具体的类
    // 第二种是准备三种笔，再准备五种颜料，然后进行选择搭配。这样就是3+5=8个类
    // 第二种方案就是桥接模式的具体使用

    // 结构：1.抽象类(这里要注意，是抽象类，不是接口) 2.扩展抽象类 3.实现类接口 4.具体实现类

    // 优点：
    // 1.抽象和实现分离(解耦)
    // 2.扩展特别方便，同时可以大大减少类的数量
    // 3.实现细节对客户不可见
    // 缺点：
    // 桥接模式的引入会增加系统的理解与设计难度，由于聚合关联关系建立在抽象层，要求开发者针对抽象进行设计与编程。
}
