package designPattern.pattern5;

/*
*	设计模式   笔记6
*	@author  zaichiyikoua
*	@time  2020年1月6日
*	@description  { 原型模式 }
*/

public class Prototype {
    // 原型模式(prototpye pattern),较为简单
    // 为了简化创建过程，可以只创建一个对象，然后拷贝去获得多个相同的对象
    // 当需要创建大量或者相似对象的时候，就可以使用原型模式，在java中有深拷贝和浅拷贝两种不同的拷贝机制

    // 结构：1.抽象原型类(这里一般都是Object) 2.具体原型类 3.客户类

    // 在很多时候都可以找到原型模式的实例应用，比如常见的复制粘贴
    // 在java中这个抽象原型类是Object类，因为它是所有类的基类。
    // Object有一个clone方法，用来将一个java对象进行拷贝一份。但是一定要一定要一定要去实现cloneable接口!

    // 深拷贝(Serializable)：
    // 所有被复制对象的所有普通成员变量都含有与原来对象相同的值，除去那些引用其他对象的变量。
    // 那些引用了其他对象的变量将指向被复制过的新对象，而不是原有的那些被引用对象
    // 换句话说，深拷贝就是把要复制的对象所引用的对象都复制了一边，除了对象本身被复制外，对象包含的引用也被复制
    // case2

    // 浅拷贝(Cloneable)：
    // 被复制对象的所有普通变量都具有和原来对象相同的值，所有对其他对象的引用仍然指向原来的变量
    // 换句话说，浅拷贝仅仅复制考虑的对象，而不复制它所引用的成员变量
    // case1

    // 优点：
    // 1.简化对象的创建过程
    // 2.可以动态的增加或者减少产品类
    // 3.可以使用深拷贝的方式来保存对象的状态。使用原型模式将对象拷贝一份并将其状态保存，可以在需要时使用
    // 缺点：
    // 1.需要为每一个类配置Cloneable接口，如果对已有的类进行改造，则违背了开闭原则
    // 2.深拷贝的时候代码比较复杂
}
