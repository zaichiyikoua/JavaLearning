package designPattern.pattern4;

/*
*	设计模式   笔记5
*	@author  zaichiyikoua
*	@time  2020年1月6日
*	@description  { 建造者模式 }
*/

public class Builder {
    // 建造者模式(builder pattern)，将一个复杂对象的构建和它的表示进行分离
    // 使得同样的构建过程可以创建不同的表示
    // 建造者模式关注复杂对象是如何一步一步创建的，对于用户，无需知道创建的过程和内部的组成细节
    // 只需要直接使用创建好的复杂对象即可

    // 结构：1.抽象建造者 2.具体建造者 3.产品角色 4.指挥者

    // 优点:1.用户不用知道产品内部的组成细节，将产品本身和产品的创建过程解耦
    // 2.每一个具体建造者都是相对独立的，与其他的建造者无关。因此可以很方便的替换掉具体建造者或者新增
    // 3.可以精细的控制产品的创建过程

    // 缺点:1.创建者模式创建的产品一般具有较多的共同点，组成部分类似。如果产品之间差异性很大的话就是不适合建造者模式
    // 2.如果产品的内部特别复杂，可能会导致需要定义更多的具体建造者来实现
}
