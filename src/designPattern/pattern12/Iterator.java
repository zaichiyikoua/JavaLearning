 package designPattern.pattern12;

 /*
*	设计模式   笔记13
*	@author  zaichiyikoua
*	@time  2020年1月26日
*	@description  { 迭代器模式 }
*/
 
 public class Iterator {
     //迭代器模式(Iterator pattern)也是非常常用的设计模式之一
     //大概的意思就是对于一个聚合对象进行遍历，通过引入迭代器将对象的遍历功能从聚合对象中抽离出来
     //聚合对象只负责存储数据，而遍历数据由迭代器来完成，简化了聚合对象的设计
     //很常见的例子就是list和set，提供一种方法来让客户访问其中的数据，又不需要向外暴露内部数据结构
     //##################
     //如果细心一点其实可以发现迭代器模式中内嵌了工厂模式
     //##################
     
     //结构:1.抽象迭代器 2.具体迭代器 3.抽象聚合类 4.具体聚合类
     
     //优点:
     //1.支持以不同的遍历方式来访问一个聚合对象
     //2.简化了聚合类
     //3.在同一个聚合上可以有多个遍历
     //4.扩展方便
     //缺点:
     //1.由于迭代器模式将存储数据和遍历数据的职责分离，增加新的聚合类需要对应增加新的迭代器类，类的个数成对增加
     //这在一定程度上增加了系统的复杂性。
}
