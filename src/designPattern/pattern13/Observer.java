package designPattern.pattern13;

/*
*	设计模式   笔记
*	@author  zaichiyikoua
*	@time  2020年1月26日
*	@description  { 观察者模式 }
*/

public class Observer {
    // 观察者模式(Observer pattern)，也是很常用的设计模式之一
    // 用于描述对象之间的关系，因为在系统中，对象之间不是孤立的，往往一个对象行为发生改变会导致一个或者多个对象的行为发生改变
    // 举个例子，比如说开车，往往是要根据红绿灯的状态来决定是否行进，这就是一种依赖关系
    // 一个对象的行为会导致依赖它的其他对象发生改变，上面的例子中，车就是观察者，灯就是被观察者
    // 还有比较常见的就是GUI事件处理模型基本上就是用的观察者模式
    // 更加简单直接一点的形容就是:当一个对象状态发生改变的时候，其依赖的对象均会得到通知并且被自动更新
    // 可以理解为MySQL中的触发器

    // 结构:1.目标(也就是被观察者) 2.具体目标 3.观察者 4.具体观察者

    // 优点:
    // 1.观察者和被观察者是抽象耦合的
    // 2.可以建立触发机制
    // 缺点:
    // 1.如果一个被观察者对象有很多的直接和间接的观察者的话，将所有的观察者都通知到会花费很多时间
    // 2.如果在观察者和观察目标之间有循环依赖的话，观察目标会触发它们之间进行循环调用，可能导致系统崩溃
    // 3.观察者模式没有相应的机制让观察者知道所观察的目标对象是怎么发生变化的，而仅仅只是知道观察目标发生了变化。
}
