package leetcode.part10;

/*
*	leetCode算法刷题记录   笔记92
*	@author  zaichiyikoua
*	@time  2020年2月25日
*	@title  { 不同路径 }
*/

//一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为“Start” ）。
//机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为“Finish”）。
//问总共有多少条不同的路径？
//例如，上图是一个7 x 3 的网格。有多少可能的路径？
//说明：m 和 n 的值均不超过 100。
//示例 1:
//输入: m = 3, n = 2
//输出: 3
//解释:
//从左上角开始，总共有 3 条路径可以到达右下角。
//1. 向右 -> 向右 -> 向下
//2. 向右 -> 向下 -> 向右
//3. 向下 -> 向右 -> 向右
//示例 2:
//输入: m = 7, n = 3
//输出: 28
public class UniquePaths {
    // 动态规划，找到规律
    // 只存在两种状态，向右和向下 除边界以外的所有点都是基于该点左边点和上边点的坐标
    public int solution(int m, int n) {
        int[][] dp = new int[m][n];
        // 最上和最左都是边界
        // 最上的一行都是(n,1)
        for (int i = 0; i < n; i++) {
            dp[0][i] = 1;
        }
        // 最左的一列都是(1,n)
        for (int i = 0; i < m; i++) {
            dp[i][0] = 1;
        }
        // 边界之外的
        for (int i = 1; i < m; i++) {
            for (int j = 1; j < n; j++) {
                // 动态方程 每个点都是基于它左边和上边的点
                dp[i][j] = dp[i - 1][j] + dp[i][j - 1];
            }
        }
        // 终点坐标
        return dp[m - 1][n - 1];
    }
}
