package designPattern.pattern10;

/*
*	设计模式   笔记11
*	@author  zaichiyikoua
*	@time  2020年1月17日
*	@description  { 外观模式 }
*/

public class Facade {
    // 外观模式(facade pattern)是一种使用频率非常高的设计模式
    // 通过引入一个外观角色来简化客户端和子系统之间的操作，为复杂的子系统来提供一个同一调用的入口
    // 可以很方便的降低系统的耦合，并且在客户端调用的时候非常的方便

    // 结构:1.外观角色 2.子系统角色
    // 可能这样说还不太清除，举个例子：
    // 比如说要买电脑，那么电脑的很多配件组装的过程等已经是否兼容等问题需要我们考虑很多
    // 那么如果这一切交给专业的组装人员来做就很轻松，可以让我们不需要操心小细节

    // 在引入外观模式之后，增加和删除整个子系统都非常的方便。但在一定的程度上不太满足“开闭原则”，需要对源代码进行修改
    // 优点:
    // 1.对客户屏蔽了子系统的组件，减少了客户处理的对象数量并且使得子系统使用起来更加容易
    // 2.子系统和客户之间保持了相对松散的耦合
    // 3.提供了一个访问子系统的统一的入口，并不影响客户对子系统的直接使用
    // 缺点:
    // 1.不能很好的限制客户使用子系统类，如果对客户访问子系统类做太多的限制那么就减少了可变性和灵活性
    // 2.一定程度上违背了开闭原则
}
